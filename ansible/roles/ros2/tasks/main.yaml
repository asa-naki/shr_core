---
# ROS2 Installation Tasks (Following official Ubuntu deb packages installation)
# Based on: https://docs.ros.org/en/jazzy/Installation/Ubuntu-Install-Debs.html
# Based on: https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debs.html

- name: Determine ROS2 distribution based on Ubuntu version
  ansible.builtin.set_fact:
    ros2_distro_to_use: "{{ 'jazzy' if ansible_distribution_version == '24.04' else 'humble' }}"

- name: Display ROS2 distribution selection
  ansible.builtin.debug:
    msg: "Selected ROS2 distribution: {{ ros2_distro_to_use }} for Ubuntu {{ ansible_distribution_version }}"

# System setup - Set locale
- name: Check current locale
  ansible.builtin.shell: locale
  register: current_locale
  changed_when: false

- name: Display current locale
  ansible.builtin.debug:
    msg: "Current locale: {{ current_locale.stdout }}"

- name: Set system locale
  ansible.builtin.shell: |
    sudo apt update && sudo apt install locales
    sudo locale-gen en_US en_US.UTF-8
    sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
    export LANG=en_US.UTF-8
  become: true
  changed_when: false

- name: Verify locale setting
  ansible.builtin.shell: locale
  register: locale_verification
  changed_when: false

- name: Display verified locale
  ansible.builtin.debug:
    msg: "Verified locale: {{ locale_verification.stdout }}"

# Setup Sources / Enable required repositories
- name: Install software-properties-common
  ansible.builtin.apt:
    name: software-properties-common
    state: present
    update_cache: true
  become: true

- name: Enable universe repository
  ansible.builtin.shell: sudo add-apt-repository universe -y
  become: true
  changed_when: false

- name: Install curl
  ansible.builtin.apt:
    name: curl
    state: present
    update_cache: true
  become: true

- name: Get latest ros2-apt-source version
  ansible.builtin.shell: |
    curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}'
  register: ros_apt_source_version
  changed_when: false

- name: Download ros2-apt-source package
  ansible.builtin.shell: |
    curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/{{ ros_apt_source_version.stdout }}/ros2-apt-source_{{ ros_apt_source_version.stdout }}.$(. /etc/os-release && echo $VERSION_CODENAME)_all.deb"
  changed_when: false

- name: Install ros2-apt-source package
  ansible.builtin.shell: sudo dpkg -i /tmp/ros2-apt-source.deb
  become: true
  changed_when: false

# Install ROS 2 packages
- name: Update apt repository caches after setting up repositories
  ansible.builtin.apt:
    update_cache: true
  become: true

- name: Upgrade system packages (recommended)
  ansible.builtin.apt:
    upgrade: dist
  become: true

- name: Install ROS2 Desktop (Recommended) - ROS, RViz, demos, tutorials
  ansible.builtin.apt:
    name: ros-{{ ros2_distro_to_use }}-desktop
    state: present
  become: true

- name: Install development tools (optional)
  ansible.builtin.apt:
    name: ros-dev-tools
    state: present
  become: true
  when: ros2_install_dev_tools | default(true)

# Environment setup
- name: Create ROS2 setup script in user's bashrc
  ansible.builtin.lineinfile:
    path: "/home/{{ ansible_user | default(ansible_env.SUDO_USER) }}/.bashrc"
    line: "source /opt/ros/{{ ros2_distro_to_use }}/setup.bash"
    state: present
    create: true
  become: false

- name: Source ROS2 environment for verification
  ansible.builtin.shell: |
    source /opt/ros/{{ ros2_distro_to_use }}/setup.bash
    echo "ROS_DISTRO: $ROS_DISTRO"
    echo "ROS_VERSION: $ROS_VERSION"
  register: ros2_env_check
  changed_when: false

- name: Display ROS2 environment information
  ansible.builtin.debug:
    msg: "ROS2 environment: {{ ros2_env_check.stdout }}"

# Try some examples (verification)
- name: Test ROS2 installation with demo talker
  ansible.builtin.shell: |
    source /opt/ros/{{ ros2_distro_to_use }}/setup.bash
    timeout 5 ros2 run demo_nodes_cpp talker || echo "Demo test completed"
  register: ros2_demo_test
  changed_when: false
  ignore_errors: true

- name: Display demo test result
  ansible.builtin.debug:
    msg: "Demo test result: {{ ros2_demo_test.stdout }}"

# Install additional ROS2 packages if specified
- name: Install additional ROS2 packages
  ansible.builtin.apt:
    name: "{{ ros2_additional_packages }}"
    state: present
  become: true
  when:
    - ros2_additional_packages is defined
    - ros2_additional_packages | length > 0

# Install additional development tools if requested
- name: Install additional colcon tools
  ansible.builtin.apt:
    name:
      - python3-colcon-common-extensions
      - python3-vcstool
      - python3-rosdep
      - python3-argcomplete
    state: present
  become: true
  when: ros2_install_dev_tools | default(true)

# Initialize rosdep for workspace development
- name: Initialize rosdep
  ansible.builtin.shell: sudo rosdep init
  become: true
  register: rosdep_init_result
  failed_when: rosdep_init_result.rc != 0 and "already exists" not in rosdep_init_result.stderr
  changed_when: rosdep_init_result.rc == 0

- name: Update rosdep
  ansible.builtin.shell: rosdep update
  changed_when: false

# Clean up temporary files
- name: Remove temporary ros2-apt-source package file
  ansible.builtin.file:
    path: "/tmp/ros2-apt-source.deb"
    state: absent

- name: Display installation completion message
  ansible.builtin.debug:
    msg: |
      ROS2 {{ ros2_distro_to_use }} installation completed successfully!

      ROS2 Desktop package installed with:
      - ROS2 core libraries
      - RViz visualization tool
      - Demo nodes and tutorials

      To use ROS2 in new terminals, run:
      source /opt/ros/{{ ros2_distro_to_use }}/setup.bash

      Or it will be automatically sourced from your ~/.bashrc

      Try the examples:
      Terminal 1: ros2 run demo_nodes_cpp talker
      Terminal 2: ros2 run demo_nodes_py listener
