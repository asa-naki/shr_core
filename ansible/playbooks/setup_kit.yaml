---
# Robotics Kit Setup Playbook (ARM64 - Raspberry Pi 5)
# This playbook sets up ROS2 robotics kit environment on ARM64 Raspberry Pi 5

- name: Setup ROS2 Robotics Kit Environment for Raspberry Pi 5 (ARM64)
  hosts: all
  become: true
  gather_facts: true
  vars:
    ros2_distro: jazzy
    target_architecture: arm64
    install_dev_tools: true
    target_ubuntu_version: "24.04"
    ros2_additional_packages:
      - ros-jazzy-example-interfaces
      - ros-jazzy-demo-nodes-cpp
      - ros-jazzy-demo-nodes-py
      - ros-jazzy-rqt-common-plugins
      - ros-jazzy-robot-state-publisher
      - ros-jazzy-joint-state-publisher
      - ros-jazzy-tf2-tools
      - ros-jazzy-tf2-ros
      - ros-jazzy-geometry-msgs
      - ros-jazzy-sensor-msgs
      - ros-jazzy-std-msgs
      - python3-colcon-common-extensions
      - python3-rosdep
      - python3-vcstool
      - python3-argcomplete

  pre_tasks:
    - name: Verify target architecture
      ansible.builtin.assert:
        that:
          - ansible_architecture == "aarch64"
        fail_msg: "This playbook is designed for ARM64/aarch64 architecture only. Current: {{ ansible_architecture }}"
        success_msg: "Architecture verification passed: {{ ansible_architecture }}"

    - name: Display system information
      ansible.builtin.debug:
        msg:
          - "Target Host: {{ inventory_hostname }}"
          - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Architecture: {{ ansible_architecture }}"
          - "ROS2 Distribution: {{ ros2_distro }}"
          - "Target: Raspberry Pi 5 Robotics Kit"

    - name: Check Ubuntu version compatibility for Raspberry Pi 5
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Ubuntu"
          - ansible_distribution_version == target_ubuntu_version
        fail_msg: >-
          This playbook is optimized for Ubuntu {{ target_ubuntu_version }} on
          Raspberry Pi 5. Current: {{ ansible_distribution }}
          {{ ansible_distribution_version }}
        success_msg: >-
          Ubuntu version check passed: {{ ansible_distribution }}
          {{ ansible_distribution_version }}

    - name: Check if running on Raspberry Pi
      ansible.builtin.shell: |
        if [ -f /proc/device-tree/model ]; then
          cat /proc/device-tree/model
        else
          echo "Unknown"
        fi
      register: pi_model
      changed_when: false

    - name: Display Raspberry Pi model
      ansible.builtin.debug:
        msg: "Detected device: {{ pi_model.stdout }}"

  roles:
    - role: ../roles/ros2
      vars:
        ros2_install_dev_tools: "{{ install_dev_tools }}"

  post_tasks:
    - name: Install Raspberry Pi specific utilities
      ansible.builtin.apt:
        name:
          - git
          - wget
          - curl
          - vim
          - nano
          - htop
          - tree
          - build-essential
          - cmake
          - gdb
          - i2c-tools
          - python3-pip
          - python3-dev
          - python3-setuptools
          - python3-wheel
          - python3-rpi.gpio
          - python3-gpiozero
          - libraspberrypi-bin
        state: present
        update_cache: true

    - name: Enable I2C interface
      ansible.builtin.lineinfile:
        path: /boot/firmware/config.txt
        regexp: "^#?dtparam=i2c_arm="
        line: "dtparam=i2c_arm=on"
        state: present
      notify: reboot_required

    - name: Enable SPI interface
      ansible.builtin.lineinfile:
        path: /boot/firmware/config.txt
        regexp: "^#?dtparam=spi="
        line: "dtparam=spi=on"
        state: present
      notify: reboot_required

    - name: Create gpio group
      ansible.builtin.group:
        name: gpio
        state: present

    - name: Add user to gpio group
      ansible.builtin.user:
        name: "{{ ansible_user | default(ansible_env.USER) }}"
        groups: gpio
        append: true

    - name: Create robotics workspace directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user | default(ansible_env.SUDO_USER) }}/robot_ws/src"
        state: directory
        owner: "{{ ansible_user | default(ansible_env.SUDO_USER) }}"
        group: "{{ ansible_user | default(ansible_env.SUDO_USER) }}"
        mode: "0755"
      become: false

    - name: Add ROS2 robotics workspace setup to bashrc
      ansible.builtin.lineinfile:
        path: "/home/{{ ansible_user | default(ansible_env.SUDO_USER) }}/.bashrc"
        line: "{{ item }}"
        state: present
        create: true
      become: false
      loop:
        - "# ROS2 Robotics Kit Environment (Raspberry Pi 5)"
        - "export ROS_DOMAIN_ID=42"
        - "export ROBOT_WS=/home/{{ ansible_user | default(ansible_env.SUDO_USER) }}/robot_ws"
        - "alias rw='cd $ROBOT_WS'"
        - "alias rs='cd $ROBOT_WS/src'"
        - "alias rb='cd $ROBOT_WS && colcon build'"
        - "alias rt='cd $ROBOT_WS && colcon test'"
        - "alias gpio_status='raspi-gpio get'"

    - name: Create udev rules for common robotics hardware
      ansible.builtin.copy:
        content: |
          # USB Serial devices
          SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", SYMLINK+="robot_serial"

          # Arduino devices
          SUBSYSTEM=="tty", ATTRS{idVendor}=="2341", ATTRS{idProduct}=="0043", SYMLINK+="arduino_uno"
          SUBSYSTEM=="tty", ATTRS{idVendor}=="2341", ATTRS{idProduct}=="8036", SYMLINK+="arduino_leonardo"

          # Common USB camera
          SUBSYSTEM=="video4linux", KERNEL=="video[0-9]*", ATTRS{product}=="USB Camera", SYMLINK+="robot_camera"
        dest: /etc/udev/rules.d/99-robot-hardware.rules
        mode: "0644"
      notify: reload_udev

    - name: Display completion message
      ansible.builtin.debug:
        msg:
          - "ü§ñ ROS2 robotics kit environment setup completed for Raspberry Pi 5!"
          - "üèóÔ∏è  Workspace created at: {{ ansible_env.HOME }}/robot_ws"
          - "üîß Robotics development tools installed"
          - "üîå GPIO, I2C, and SPI interfaces enabled"
          - "üìù Environment aliases added to .bashrc"
          - "‚öôÔ∏è  Hardware udev rules configured"
          - ""
          - "Next steps:"
          - "1. Reboot the system: sudo reboot"
          - "2. Source your bashrc: source ~/.bashrc"
          - "3. Navigate to workspace: rw"
          - "4. Test GPIO access: gpio_status"
          - "5. Test ROS2: ros2 topic list"

  handlers:
    - name: reboot_required
      ansible.builtin.debug:
        msg: "System reboot is required to enable hardware interfaces"

    - name: reload_udev
      ansible.builtin.systemd:
        name: udev
        state: reloaded
