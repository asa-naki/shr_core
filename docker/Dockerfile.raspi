# Raspberry Pi 5用のROS2 Jazzy開発環境
# Ubuntu 24.04ベース（マルチアーキテクチャ対応）
FROM ubuntu:24.04

# メタデータ
LABEL maintainer="ROS2 Developer"
LABEL description="ROS2 Jazzy development environment for Raspberry Pi 5"
LABEL version="1.0"

# 環境変数の設定
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_DISTRO=jazzy
ENV ROS_PYTHON_VERSION=3
ENV ROS_DOMAIN_ID=42
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# 作業ディレクトリ
WORKDIR /workspace

# システムパッケージの更新とロケール設定
RUN apt-get update && apt-get install -y \
    locales \
    && locale-gen en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

# 基本パッケージのインストール
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    lsb-release \
    software-properties-common \
    ca-certificates \
    wget \
    git \
    vim \
    nano \
    htop \
    tree \
    build-essential \
    cmake \
    gdb \
    python3-pip \
    python3-dev \
    python3-setuptools \
    python3-wheel \
    python3-venv \
    && rm -rf /var/lib/apt/lists/*

# ROS2 APTリポジトリの追加
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# ROS2 Jazzyのインストール
RUN apt-get update && apt-get install -y \
    ros-jazzy-desktop \
    ros-jazzy-nav2-bringup \
    ros-jazzy-navigation2 \
    ros-jazzy-slam-toolbox \
    ros-jazzy-joint-state-publisher \
    ros-jazzy-tf2-tools \
    ros-jazzy-tf2-ros \
    ros-jazzy-geometry-msgs \
    ros-jazzy-sensor-msgs \
    ros-jazzy-std-msgs \
    ros-jazzy-rviz2 \
    ros-jazzy-rqt \
    ros-jazzy-rqt-common-plugins \
    ros-jazzy-image-transport \
    ros-jazzy-cv-bridge \
    ros-jazzy-vision-opencv \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-vcstool \
    python3-argcomplete \
    ros-dev-tools \
    && rm -rf /var/lib/apt/lists/*

# Raspberry Pi特有のPythonパッケージをインストール
RUN pip3 install --break-system-packages --no-cache-dir \
    RPi.GPIO \
    gpiozero \
    adafruit-circuitpython-motor \
    adafruit-circuitpython-servokit \
    opencv-python \
    numpy \
    matplotlib \
    jupyter

# rosdepの初期化
RUN rosdep init && rosdep update

# 非rootユーザーの作成
ARG USERNAME=ros
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && apt-get update \
    && apt-get install -y sudo \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME \
    && rm -rf /var/lib/apt/lists/*

# ワークスペースディレクトリの作成
RUN mkdir -p /home/$USERNAME/robot_ws/src \
    && chown -R $USERNAME:$USERNAME /home/$USERNAME/robot_ws

# ユーザーを切り替え
USER $USERNAME

# ROS2環境のセットアップスクリプト
RUN echo "# ROS2 Jazzy Setup" >> /home/$USERNAME/.bashrc \
    && echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> /home/$USERNAME/.bashrc \
    && echo "export ROS_DOMAIN_ID=$ROS_DOMAIN_ID" >> /home/$USERNAME/.bashrc \
    && echo "export ROBOT_WS=/home/$USERNAME/robot_ws" >> /home/$USERNAME/.bashrc \
    && echo "alias rw='cd \$ROBOT_WS'" >> /home/$USERNAME/.bashrc \
    && echo "alias rs='cd \$ROBOT_WS/src'" >> /home/$USERNAME/.bashrc \
    && echo "alias rb='cd \$ROBOT_WS && colcon build --symlink-install'" >> /home/$USERNAME/.bashrc \
    && echo "alias rbd='cd \$ROBOT_WS && colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Debug'" >> /home/$USERNAME/.bashrc \
    && echo "alias rbr='cd \$ROBOT_WS && colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release'" >> /home/$USERNAME/.bashrc \
    && echo "alias rbc='cd \$ROBOT_WS && rm -rf build install log && colcon build --symlink-install'" >> /home/$USERNAME/.bashrc \
    && echo "alias rt='cd \$ROBOT_WS && colcon test'" >> /home/$USERNAME/.bashrc \
    && echo "alias rtr='cd \$ROBOT_WS && colcon test-result --verbose'" >> /home/$USERNAME/.bashrc \
    && echo "alias rr='cd \$ROBOT_WS && source install/setup.bash'" >> /home/$USERNAME/.bashrc \
    && echo "alias cbp='colcon build --packages-select'" >> /home/$USERNAME/.bashrc \
    && echo "alias cbu='colcon build --packages-up-to'" >> /home/$USERNAME/.bashrc \
    && echo "# Auto-source workspace if install/setup.bash exists" >> /home/$USERNAME/.bashrc \
    && echo "if [ -f \$ROBOT_WS/install/setup.bash ]; then source \$ROBOT_WS/install/setup.bash; fi" >> /home/$USERNAME/.bashrc

# エントリーポイントスクリプトの作成
COPY docker/entrypoint-raspi.sh /entrypoint.sh
USER root
RUN chmod +x /entrypoint.sh
USER $USERNAME

# デフォルトのワークディレクトリ
WORKDIR /home/$USERNAME/robot_ws

# エントリーポイント
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]
