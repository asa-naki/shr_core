name: ROS2 Build and Test

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - 'ansible/**'
      - 'docker/**'
      - 'scripts/**'
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - 'ansible/**'
      - 'docker/**'
      - 'scripts/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ros_distro: [humble]
        architecture: [amd64, arm64]
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU
      if: matrix.architecture == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build and test ROS2 packages
      run: |
        # Create a temporary Dockerfile for building and testing
        cat > Dockerfile.test << 'EOF'
        FROM ros:${{ matrix.ros_distro }}-ros-base
        
        # Install additional dependencies
        RUN apt-get update && apt-get install -y \
            python3-colcon-common-extensions \
            python3-pip \
            python3-rosdep \
            python3-vcstool \
            git \
            build-essential \
            && rm -rf /var/lib/apt/lists/*

        # Install Python dependencies
        RUN pip3 install pyserial

        # Create workspace
        WORKDIR /ros2_ws
        
        # Copy source code
        COPY . src/shr_core/
        
        # Import additional repositories
        RUN if [ -f src/shr_core/dependency.repos ]; then \
            cd src && vcs import < shr_core/dependency.repos; \
        fi
        
        # Initialize rosdep
        RUN rosdep init || true
        RUN rosdep update
        
        # Install dependencies
        RUN rosdep install --from-paths src --ignore-src -r -y
        
        # Source ROS2 setup
        RUN echo "source /opt/ros/${{ matrix.ros_distro }}/setup.bash" >> ~/.bashrc
        
        # Build packages
        RUN . /opt/ros/${{ matrix.ros_distro }}/setup.bash && \
            colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release
        
        # Run tests
        RUN . /opt/ros/${{ matrix.ros_distro }}/setup.bash && \
            . install/setup.bash && \
            colcon test --return-code-on-test-failure
        
        # Show test results
        RUN . /opt/ros/${{ matrix.ros_distro }}/setup.bash && \
            . install/setup.bash && \
            colcon test-result --verbose
        EOF
        
        # Build and run the test container
        docker buildx build \
          --platform linux/${{ matrix.architecture }} \
          -f Dockerfile.test \
          --progress=plain \
          .

  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install linting tools
      run: |
        pip install flake8 pep257

    - name: Run flake8 (Python style check)
      run: |
        find . -name "*.py" -not -path "./__pycache__/*" -not -path "./build/*" -not -path "./install/*" -not -path "./log/*" | xargs flake8 --max-line-length=100 --ignore=E501,W503

    - name: Run pep257 (Python docstring check)
      run: |
        find . -name "*.py" -not -path "./__pycache__/*" -not -path "./build/*" -not -path "./install/*" -not -path "./log/*" | xargs pep257 --ignore=D100,D101,D102,D103,D104,D105,D107,D203,D213

  format-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install ament_clang_format
      run: |
        sudo apt-get update
        sudo apt-get install -y ros-dev-tools
        pip3 install ament_clang_format

    - name: Check C++ formatting
      run: |
        find . -name "*.cpp" -o -name "*.hpp" | xargs ament_clang_format --config .clang-format --reformat-code=false

  build-summary:
    needs: [build-and-test, static-analysis]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "## Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ **Build and Test**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build and Test**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.static-analysis.result }}" == "success" ]; then
          echo "✅ **Static Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Static Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
